#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var User = require('../User/User');
var Sch = require('../Schedule/Schedule');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
    // User.USER(1, 2, 3, 4);
    // createUser();
    // createSchedule();

}

async function createUser() {
    const da = await User.USER("DefaultUserD1", "DefaultEmail@email.com", "Dummypic.png");
    const da2 = await User.USER("DefaultUserD2", "DefaultEmail2@email.com", "Dummypic.png");
    const da3 = await User.USER("DefaultUserD3", "DefaultEmail3@email.com", "Dummypic.png");
    const da4 = await User.USER("DefaultUserD4", "DefaultEmail4@email.com", "Dummypic.png");

    console.log("User::")
    console.log(da)
}

async function createSchedule() {
    const dataToInput = await Sch.Schedule("Blach", "KVjkfb");
    console.log(dataToInput);
}